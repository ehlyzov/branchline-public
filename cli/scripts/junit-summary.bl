SOURCE row;

FUNC toNumber(value) {
    LET parsed = NUMBER(value ?? 0);
    IF parsed == NULL THEN { RETURN 0; }
    RETURN parsed;
}

FUNC normalizeReports(payload) {
    IF payload == NULL THEN { RETURN []; }
    IF IS_OBJECT(payload) THEN { RETURN [payload]; }
    RETURN payload;
}

FUNC extractTotals(report) {
    LET payload = report.totals;
    IF payload != NULL THEN {
        RETURN {
            tests: toNumber(payload.tests),
            failures: toNumber(payload.failures),
            errors: toNumber(payload.errors),
            skipped: toNumber(payload.skipped)
        };
    }

    RETURN {
        tests: toNumber(report.tests),
        failures: toNumber(report.failures),
        errors: toNumber(report.errors),
        skipped: toNumber(report.skipped)
    };
}

FUNC accumulateTotals(current, delta) {
    RETURN {
        tests: current.tests + toNumber(delta.tests),
        failures: current.failures + toNumber(delta.failures),
        errors: current.errors + toNumber(delta.errors),
        skipped: current.skipped + toNumber(delta.skipped)
    };
}

FUNC statusFor(tests, failed) {
    IF tests == 0 THEN { RETURN "error"; }
    IF failed == 0 THEN { RETURN "passing"; }
    RETURN "failing";
}

FUNC colorFor(status) {
    IF status == "passing" THEN { RETURN "44cc11"; }
    IF status == "failing" THEN { RETURN "e05d44"; }
    IF status == "error" THEN { RETURN "f39c12"; }
    RETURN "9f9f9f";
}

FUNC formatSummary(tests, failed, skipped) {
    LET summary = STRING(tests) + " tests";
    IF failed > 0 THEN {
        SET summary = summary + ", " + STRING(failed) + " failed";
    }
    IF skipped > 0 THEN {
        SET summary = summary + ", " + STRING(skipped) + " skipped";
    }
    RETURN summary;
}

TRANSFORM Summary { stream } {
    LET reports = normalizeReports(row.reports);
    LET totals = { tests: 0, failures: 0, errors: 0, skipped: 0 };
    LET count = 0;

    FOR report IN reports {
        LET metrics = extractTotals(report);
        SET totals = accumulateTotals(totals, metrics);
        SET count = count + 1;
    }

    LET failed = totals.failures + totals.errors;
    LET status = statusFor(totals.tests, failed);
    LET color = colorFor(status);
    LET summary = formatSummary(totals.tests, failed, totals.skipped);

    OUTPUT {
        status: status,
        tests: summary,
        color: color,
        reports: count,
        failed: failed,
        totals: totals
    };
}
