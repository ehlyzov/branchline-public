plugins {
    id 'org.jetbrains.kotlin.multiplatform'
}

kotlin {
    jvm {
        compilations.all { comp ->
            comp.kotlinOptions {
                freeCompilerArgs += ["-Xnested-type-aliases", "-Xexpect-actual-classes"]
            }
        }
        testRuns["test"].executionTask.configure {
            useJUnitPlatform()
        }
    }
    js(IR) {
        nodejs {
            binaries.executable()
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation project(':interpreter')
                implementation project(':vm')
                implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.9.0'
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.junit.jupiter:junit-jupiter-params:5.10.2'
            }
        }
        jsMain {
            dependencies {
                implementation npm('fast-xml-parser', '4.3.5')
            }
        }
        jsTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
            }
        }
    }
}

// JVM run helpers for local development
def jvmCompilation = kotlin.targets.jvm.compilations.main

def jsProductionKotlinDir = layout.buildDirectory.dir("compileSync/js/main/productionExecutable/kotlin")
def jsCliPackageDir = layout.buildDirectory.dir("cliJsPackage")

tasks.register('prepareJsCliPackage') {
    group = 'build'
    description = 'Assemble the Node.js Branchline CLI bundle contents.'
    dependsOn 'jsProductionExecutableCompileSync'
    doLast {
        def targetRoot = jsCliPackageDir.get().asFile
        project.delete(targetRoot)

        // Copy compiled Kotlin JS artifacts
        copy {
            from(jsProductionKotlinDir.get().asFile)
            into(new File(targetRoot, 'kotlin'))
        }

        // Copy launcher script (ensure executable bit)
        copy {
            from("${projectDir}/js-package/bin/bl.cjs")
            into(new File(targetRoot, 'bin'))
            fileMode = 0755
        }

        // Generate package.json from template with current version
        def template = file("${projectDir}/js-package/package.json.tpl").text
        def resolved = template.replace('__VERSION__', project.version.toString())
        def pkgFile = new File(targetRoot, 'package.json')
        pkgFile.text = resolved
    }
}

tasks.register('packageJsCli', org.gradle.api.tasks.bundling.Tar) {
    group = 'distribution'
    description = 'Create a distributable tarball containing the Node.js Branchline CLI.'
    dependsOn 'prepareJsCliPackage'
    archiveBaseName.set('branchline-cli-js')
    archiveVersion.set(project.version.toString())
    archiveExtension.set('tgz')
    compression = org.gradle.api.tasks.bundling.Compression.GZIP
    from(jsCliPackageDir)
}

tasks.register('runBl', JavaExec) {
    group = 'application'
    description = 'Run Branchline CLI (bl) on the JVM target.'
    mainClass = 'io.branchline.cli.BlJvmMain'
    classpath = files(jvmCompilation.output.allOutputs, configurations.jvmRuntimeClasspath)
    dependsOn jvmCompilation.compileTaskProvider
}

tasks.register('runBlc', JavaExec) {
    group = 'application'
    description = 'Run Branchline compiler CLI (blc) on the JVM target.'
    mainClass = 'io.branchline.cli.BlcJvmMain'
    classpath = files(jvmCompilation.output.allOutputs, configurations.jvmRuntimeClasspath)
    dependsOn jvmCompilation.compileTaskProvider
}

tasks.register('runBlvm', JavaExec) {
    group = 'application'
    description = 'Run Branchline VM CLI (blvm) on the JVM target.'
    mainClass = 'io.branchline.cli.BlvmJvmMain'
    classpath = files(jvmCompilation.output.allOutputs, configurations.jvmRuntimeClasspath)
    dependsOn jvmCompilation.compileTaskProvider
}
