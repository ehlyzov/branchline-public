plugins {
    id 'org.jetbrains.kotlin.multiplatform'
}

kotlin {
    jvm {
        compilations.all { comp ->
            comp.kotlinOptions {
                freeCompilerArgs += ["-Xnested-type-aliases", "-Xexpect-actual-classes"]
            }
        }
        testRuns["test"].executionTask.configure {
            useJUnitPlatform()
        }
    }
    js(IR) {
        nodejs {
            binaries.executable()
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation project(':interpreter')
                implementation project(':vm')
                implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.9.0'
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.junit.jupiter:junit-jupiter-params:5.10.2'
            }
        }
        jsMain {
            dependencies {
                implementation npm('fast-xml-parser', '4.3.5')
            }
        }
        jsTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
            }
        }
    }
}

// JVM run helpers for local development
 def jvmCompilation = kotlin.targets.jvm.compilations.main

tasks.register('runBl', JavaExec) {
    group = 'application'
    description = 'Run Branchline CLI (bl) on the JVM target.'
    mainClass = 'io.branchline.cli.BlJvmMain'
    classpath = files(jvmCompilation.output.allOutputs, configurations.jvmRuntimeClasspath)
    dependsOn jvmCompilation.compileTaskProvider
}

tasks.register('runBlc', JavaExec) {
    group = 'application'
    description = 'Run Branchline compiler CLI (blc) on the JVM target.'
    mainClass = 'io.branchline.cli.BlcJvmMain'
    classpath = files(jvmCompilation.output.allOutputs, configurations.jvmRuntimeClasspath)
    dependsOn jvmCompilation.compileTaskProvider
}

tasks.register('runBlvm', JavaExec) {
    group = 'application'
    description = 'Run Branchline VM CLI (blvm) on the JVM target.'
    mainClass = 'io.branchline.cli.BlvmJvmMain'
    classpath = files(jvmCompilation.output.allOutputs, configurations.jvmRuntimeClasspath)
    dependsOn jvmCompilation.compileTaskProvider
}
