var f=""+new URL("kotlin-kotlin-stdlib-CtDymRfS.js",import.meta.url).href,p=""+new URL("kotlinx-serialization-kotlinx-serialization-core-B3m2y7FA.js",import.meta.url).href,d=""+new URL("kotlinx-serialization-kotlinx-serialization-json-DavvnmV9.js",import.meta.url).href,m=""+new URL("branchline-interpreter-BLcNU0Uu.js",import.meta.url).href;const s="io.github.ehlyzov.branchline-public:interpreter";let l=null;const c=new Set;async function i(n){if(c.has(n))return;const t=await fetch(n);if(!t.ok)throw new Error(`Failed to load interpreter bundle: ${n}`);const o=await t.text();(0,eval)(o),c.add(n)}function y(){return l||(l=(async()=>{const n=self;n[s]||(await i(f),await i(p),await i(d),await i(m));const t=n[s];if(!t)throw new Error("Branchline interpreter module failed to initialize.");const o=t.playground??t,r=o.PlaygroundFacade;if(r&&typeof r=="object"&&typeof r.run=="function")return r;if(typeof r=="function")try{const e=r();if(e&&typeof e.run=="function")return e}catch{}const a=o.PlaygroundFacade_getInstance;if(typeof a=="function"){const e=a();if(e&&typeof e.run=="function")return e}throw new Error("Unable to resolve Branchline playground facade.")})()),l}self.onmessage=async n=>{const{code:t,input:o,trace:r}=n.data;try{const e=(await y()).run(t,o,r);self.postMessage(e)}catch(a){const u={success:!1,outputJson:null,errorMessage:a instanceof Error?a.message:String(a),line:null,column:null,explainJson:null,explainHuman:null};self.postMessage(u)}};
